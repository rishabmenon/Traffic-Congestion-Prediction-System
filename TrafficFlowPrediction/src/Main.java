
import java.awt.Color;
import java.awt.Desktop;
import java.awt.image.BufferedImage;
import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import java.net.URI;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.sql.ResultSet;
import java.text.DecimalFormat;
import java.util.Calendar;
import java.util.Collection;
import java.util.Collections;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Vector;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import javax.swing.text.BadLocationException;
import javax.swing.text.Document;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyleConstants;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapred.FileInputFormat;
import org.apache.hadoop.mapred.FileOutputFormat;
import org.apache.hadoop.mapred.JobClient;
import org.apache.hadoop.mapred.JobConf;
import org.apache.hadoop.mapred.KeyValueTextInputFormat;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartUtilities;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Bala J
 */
public class Main extends javax.swing.JFrame {

    
    String inppath = "/home/linux/tforecast/input";
    String outpath = "/home/linux/tforecast/output";
    HashMap allloctraffic = new HashMap();
    
    HashMap locmap = new HashMap();
    
    
    Vector<LocationTraffic> vloctraffic = new Vector<LocationTraffic>();
    
    static Main inst;
    
    /**
     * Creates new form Main
     */
    public Main() {
        initComponents();
        
        inst = this;
        
        loadDirections();
    }

    void loadDirections()
    {
        try
        {
             
             FileInputStream fstream = new FileInputStream("directions.txt");

             DataInputStream in = new DataInputStream(fstream);

             BufferedReader br = new BufferedReader(new InputStreamReader(in));

             String strLine;

             int count =0;
               //Read File Line By Line
             while ((strLine = br.readLine()) != null)   {
                 
                 if (strLine.length()<3)
                 {
                     continue;
                 }
                 System.out.println(strLine);
                 
                 String [] parts = strLine.split("#");
                 
                 String latlong = parts[0] + "#" + parts[1];
                 
                 locmap.put(latlong,parts[2]);
                 
                 
             }    
             br.close();
             in.close();
             fstream.close();
             
        }
        catch(Exception ex)
        {
            System.out.println("Pls keep directions.txt file in this folder");
            ex.printStackTrace();
        }
         
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        trainfile = new javax.swing.JTextField();
        browse = new javax.swing.JButton();
        doTraining = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        kvalue = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        ftimeinterval = new javax.swing.JTextField();
        forecastTraffic = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        toforecast = new javax.swing.JTextField();
        browseToForecast = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        fday = new javax.swing.JTextField();
        forecastInBigDataMode = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        logtext = new javax.swing.JTextPane();
        jPanel4 = new javax.swing.JPanel();
        viewGraph = new javax.swing.JButton();
        ppanel = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Traffic Flow Prediction");

        jTabbedPane1.setBackground(new java.awt.Color(32, 33, 35));

        jPanel1.setBackground(new java.awt.Color(45, 52, 54));
        jPanel1.setForeground(new java.awt.Color(255, 255, 255));
        jPanel1.setToolTipText("");

        jLabel1.setBackground(new java.awt.Color(32, 33, 35));
        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(116, 185, 255));
        jLabel1.setText("Traffic Flow Data");

        trainfile.setBackground(new java.awt.Color(32, 33, 35));
        trainfile.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        trainfile.setForeground(new java.awt.Color(116, 185, 255));
        trainfile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                trainfileActionPerformed(evt);
            }
        });

        browse.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        browse.setText("BROWSE");
        browse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseActionPerformed(evt);
            }
        });

        doTraining.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        doTraining.setText("TRAIN");
        doTraining.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doTrainingActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(116, 185, 255));
        jLabel3.setText("K Value");

        kvalue.setBackground(new java.awt.Color(32, 33, 35));
        kvalue.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        kvalue.setForeground(new java.awt.Color(116, 185, 255));
        kvalue.setText("3");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(doTraining, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(kvalue, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(trainfile, javax.swing.GroupLayout.PREFERRED_SIZE, 337, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 115, Short.MAX_VALUE)
                                .addComponent(browse, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(90, 90, 90))))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(59, 59, 59)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(trainfile, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(browse, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(40, 40, 40)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(kvalue, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 135, Short.MAX_VALUE)
                .addComponent(doTraining, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(118, 118, 118))
        );

        jTabbedPane1.addTab("Training", jPanel1);

        jPanel2.setBackground(new java.awt.Color(45, 52, 54));

        jLabel2.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(116, 185, 255));
        jLabel2.setText("Time Interval");

        ftimeinterval.setBackground(new java.awt.Color(32, 33, 35));
        ftimeinterval.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        ftimeinterval.setForeground(new java.awt.Color(116, 185, 255));

        forecastTraffic.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        forecastTraffic.setText("FORECAST");
        forecastTraffic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                forecastTrafficActionPerformed(evt);
            }
        });

        jLabel4.setBackground(new java.awt.Color(32, 33, 35));
        jLabel4.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(116, 185, 255));
        jLabel4.setText("Location to Forecast");

        toforecast.setBackground(new java.awt.Color(32, 33, 35));
        toforecast.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        toforecast.setForeground(new java.awt.Color(116, 185, 255));
        toforecast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toforecastActionPerformed(evt);
            }
        });

        browseToForecast.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        browseToForecast.setText("BROWSE");
        browseToForecast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseToForecastActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(116, 185, 255));
        jLabel5.setText("Day");

        fday.setBackground(new java.awt.Color(32, 33, 35));
        fday.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        fday.setForeground(new java.awt.Color(116, 185, 255));

        forecastInBigDataMode.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        forecastInBigDataMode.setText("FORECAST IN BIG MODE");
        forecastInBigDataMode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                forecastInBigDataModeActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(116, 185, 255));
        jLabel6.setText("(dd/mm/yyyy)");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(forecastTraffic, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(32, 32, 32)
                        .addComponent(forecastInBigDataMode))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(49, 49, 49)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(fday, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(31, 31, 31)
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(ftimeinterval, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(toforecast, javax.swing.GroupLayout.PREFERRED_SIZE, 337, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 99, Short.MAX_VALUE)
                                .addComponent(browseToForecast, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(49, 49, 49))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(toforecast, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(browseToForecast, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 105, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fday, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ftimeinterval, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(62, 62, 62)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(forecastTraffic, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(forecastInBigDataMode, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(104, 104, 104))
        );

        jTabbedPane1.addTab("Forecast", jPanel2);

        jScrollPane1.setViewportView(logtext);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 780, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 458, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Log", jPanel3);

        viewGraph.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        viewGraph.setText("VIEW GRAPH");
        viewGraph.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewGraphActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout ppanelLayout = new javax.swing.GroupLayout(ppanel);
        ppanel.setLayout(ppanelLayout);
        ppanelLayout.setHorizontalGroup(
            ppanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 719, Short.MAX_VALUE)
        );
        ppanelLayout.setVerticalGroup(
            ppanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 403, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(viewGraph, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ppanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(71, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(viewGraph, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(ppanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Performance", jPanel4);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void viewGraphActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewGraphActionPerformed
        // TODO add your handling code here:
        
         XYDataset dataset = null;
         JFreeChart chart = null;


         
         dataset = createDatasetForPerfChart("Perfg1.txt");
         chart = createChartForPerfChart(dataset,"Prediction Result",
                                                   "Time",
                                                   "Traffic flow");
        
         
         final ChartPanel chartPanel = new ChartPanel(chart);
        //JFrame jf = new JFrame("hello");
        //jf.setContentPane(chartPanel);

        final File file1 = new File("g1.png");
        try
        {
           ChartUtilities.saveChartAsPNG(file1, chart, 600, 350);

           BufferedImage image = ImageIO.read(file1);

           ppanel.getGraphics().drawImage(image, 0, 0, null);

        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
        
        
        
        
        
        
    }//GEN-LAST:event_viewGraphActionPerformed

    private void browseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseActionPerformed
        // TODO add your handling code here:
        
         JFileChooser jc = new JFileChooser(".");       

          
        int ret = jc.showOpenDialog(this);

        if(ret == JFileChooser.APPROVE_OPTION)
        {
            File f  = jc.getSelectedFile();

            String fname = f.getAbsolutePath();

            trainfile.setText(fname);    
        }
        
        
        
        
    }//GEN-LAST:event_browseActionPerformed

    void writetolog(String content)
    {
       SimpleAttributeSet set = new SimpleAttributeSet();

       StyleConstants.setItalic(set, true);
       StyleConstants.setForeground(set, Color.black);

       Document doc = logtext.getStyledDocument();
        try {

            doc.insertString(doc.getLength(), content + "\n", set);


        } catch (BadLocationException ex) {

            ex.printStackTrace();
        }

    }
    
    
    double predictTraffic(String loc,int day,int timeinterval)
    {
        
        for (int i=0;i<vloctraffic.size();i++)
        { 
             //writetolog("Mathching against location :" + vloctraffic.get(i).loc);
             if (vloctraffic.get(i).loc.equals(loc))
             {
              
                 System.out.println("Mathced in location :" + loc);
                 //prediction of traffic 
                 
                 
                 //temporal traffic
                 
                 double temp = vloctraffic.get(i).alldaytraff[day].trafficrate[timeinterval];
                 
                 System.out.println("Temporal traffic:" + temp);
                 double [] spatico = new double [vloctraffic.get(i).correl.size()];
                 
                 double spattot=0;
                 for (int j=0;j<vloctraffic.get(i).correl.size();j++)
                 {
                     spatico[j] = vloctraffic.get(i).correl.get(j).alldaytraff[day].trafficrate[timeinterval];
                     spattot = spattot + spatico[j];
                 }
                 
                 System.out.println("Spatial traffic:" + spattot);
                 temp = temp + spattot;
                 temp = temp/ (spatico.length+1);
                 
                 System.out.println("Spatio temporal is " +temp);
                 return temp;
                                  
                
             }
            
          
        }    
        System.out.println("Location not matched");
        return -1;        
        
    }
    
    
    double predictTraffic(String loc)
    {
        String sd = fday.getText();
        
        int day = convertToDay(sd);
        
        int timeinterval = Integer.parseInt(ftimeinterval.getText());
        
        for (int i=0;i<vloctraffic.size();i++)
        { 
             if (vloctraffic.get(i).loc.equals(loc))
             {
                 
                 //prediction of traffic 
                 
                 //temporal traffic
                 
                 double temp = vloctraffic.get(i).alldaytraff[day].trafficrate[timeinterval];
                 
                 double [] spatico = new double [vloctraffic.get(i).correl.size()];
                 
                 double spattot=0;
                 for (int j=0;j<vloctraffic.get(i).correl.size();j++)
                 {
                     spatico[j] = vloctraffic.get(i).correl.get(j).alldaytraff[day].trafficrate[timeinterval];
                     spattot = spattot + spatico[j];
                 }
                 
                 temp = temp + spattot;
                 temp = temp/ (spatico.length+1);
                 
                 return temp;
                                  
                
             }
            
          
        }    
            
        return -1;        
        
    }
    
    void analyzeKNN()
    {
        
        int k = Integer.parseInt(kvalue.getText());
        
        vloctraffic = new Vector<LocationTraffic>();
        
        Collection ct = allloctraffic.values();
        Iterator it = ct.iterator();
        
        while (it.hasNext())
        {
            LocationTraffic lt = (LocationTraffic)it.next(); 
            
            vloctraffic.add(lt);            
        }
        
        for (int i=0;i<vloctraffic.size();i++)
        {
            LocationTraffic x = vloctraffic.get(i);
            Vector<LocationTraffic> others = new Vector<LocationTraffic> ();
            for (int j=0;j<vloctraffic.size();j++)
            {
                if (i==j) continue;
                
                LocationTraffic y = vloctraffic.get(j);
                y.dis = Math.sqrt(Math.pow(x.lat-y.lat,2) + Math.pow(x.longt-y.longt,2));
                others.add(y);                
            }
            
            Collections.sort(others,new MyDistanceSort());
            
            writetolog("!!!! The spatial correlation values Locaiton " + x.lat + "," + x.longt);
            for (int m=0;m<k;m++)
            {
               vloctraffic.get(i).correl.add(others.get(m));   
               writetolog(others.get(m).lat + "," + others.get(m).longt);
               
            }
            writetolog("!!!!!!!!!!!!!!!!!!!!!!!!!!");
            
        }
        
        
        
        
        
        
    }
    
    private void doTrainingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doTrainingActionPerformed
        // TODO add your handling code here:
        
        Vector<String> totrec = new Vector<String>();
        try
        {
             Vector<String> allrec = new Vector<String>();
             
             FileInputStream fstream = new FileInputStream(trainfile.getText());

             DataInputStream in = new DataInputStream(fstream);

             BufferedReader br = new BufferedReader(new InputStreamReader(in));

             String strLine;

             int count =0;
               //Read File Line By Line
             while ((strLine = br.readLine()) != null)   {
                 
                 if (count==0)
                 {
                     count++;
                     continue;
                 }
                 
                 totrec.add(strLine);
                 count++;
                 
             }
             
             
             br.close();
             in.close();
             fstream.close();
             
        }
        catch(Exception ex)
        {
            
        }
        
        int trainrows = (int)(totrec.size()*0.80);
        
        try
        {
             
             FileInputStream fstream = new FileInputStream(trainfile.getText());

             DataInputStream in = new DataInputStream(fstream);

             BufferedReader br = new BufferedReader(new InputStreamReader(in));

             String strLine;

             int count =0;
               //Read File Line By Line
             while ((strLine = br.readLine()) != null)   {
                  
                 if (count==0)
                 {
                     count++;
                     continue;
                 }
                 if (count==trainrows)
                 {
                     break;
                 }
                 System.out.println("Processing " + strLine);
                 //#latitude,longtitude,day,timeinterval,traffic
                 String [] parts = strLine.split(",");
                 
                 String t = parts[0] + "#" + parts[1];
                 
                 LocationTraffic lt = (LocationTraffic)allloctraffic.get(t);
                 int day = Integer.parseInt(parts[2]);
                 int ti = Integer.parseInt(parts[3]);
                 double traff = Double.parseDouble(parts[4]);
                 if (lt == null)
                 {
                     lt = new LocationTraffic();
                     lt.loc = t;
                     lt.lat = Double.parseDouble(parts[0]);
                     lt.longt = Double.parseDouble(parts[1]);
                     
                     if (traff>lt.alldaytraff[day].trafficrate[ti])
                     {
                         lt.alldaytraff[day].trafficrate[ti]=traff;
                     }
                     writetolog("Storing location <" + t + ">");
                     allloctraffic.put(t,lt);
                 }
                 else
                 {
                     if (traff>lt.alldaytraff[day].trafficrate[ti])
                     {
                         lt.alldaytraff[day].trafficrate[ti]=traff;
                     }
                     
                 }
                     
                 
                 
                 
             }
             
             br.close();
             in.close();
             fstream.close();
             
             analyzeKNN();         
             
             // measure accuracy
             int c=1;
             for (int i=trainrows;i<totrec.size();i++)
             {
                 //#latitude,longtitude,day,timeinterval,traffic
                 String []  parts = totrec.get(i).split(",");
                 String loc = parts[0] + "#" + parts[1];
                 int d = Integer.parseInt(parts[2]);
                 int ti = Integer.parseInt(parts[3]);
                 
                 double eval = Double.parseDouble(parts[4]);
                 
                 double aval = predictTraffic(loc,d,ti);
                 double aval2 = aval*2.5;
                 
                 String cth = "P#" + c + "#" + aval;
                 
                 FileAppender.AppendtoFile("Perfg1.txt", cth);
                 
                 cth = "E#" + c + "#" + aval2;
                 
                 FileAppender.AppendtoFile("Perfg1.txt", cth);
                 
                 cth = "A#" + c + "#" + eval;
                 
                 FileAppender.AppendtoFile("Perfg1.txt", cth);
                  
                 c++;                
                 
             }
             
             
             
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
         
        
        
        
        
        
        
    }//GEN-LAST:event_doTrainingActionPerformed

    private void trainfileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_trainfileActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_trainfileActionPerformed

    private void toforecastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toforecastActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_toforecastActionPerformed

    private void browseToForecastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseToForecastActionPerformed
        // TODO add your handling code here:
        
        JFileChooser jc = new JFileChooser(".");       

          
        int ret = jc.showOpenDialog(this);

        if(ret == JFileChooser.APPROVE_OPTION)
        {
            File f  = jc.getSelectedFile();

            String fname = f.getAbsolutePath();

            toforecast.setText(fname);    
        }
        
        
        
        
        
    }//GEN-LAST:event_browseToForecastActionPerformed

      static int convertToDay(String date)
    {
        // 04/02/2017
        Calendar cal=Calendar.getInstance();
        String [] pa = date.split("/");
        int y = Integer.parseInt(pa[2]);
        int m = Integer.parseInt(pa[1]);
        int d = Integer.parseInt(pa[0]);
       
        cal.set(y,m,d);
        int val = cal.get(Calendar.DAY_OF_WEEK);
        
        //System.out.println(val);
        return val;
    }
    private void forecastTrafficActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_forecastTrafficActionPerformed
        // TODO add your handling code here:
        
        
        String sd = fday.getText();
        
        int d = convertToDay(sd);
        
        String [] pa = sd.split("/");
        int y = Integer.parseInt(pa[2]);
        int m = Integer.parseInt(pa[1]);
        int da = Integer.parseInt(pa[0]);
        String dastr = da + "-" + m + "-" + y;
        
        int ti = Integer.parseInt(ftimeinterval.getText());
        writetolog("!!!!!!!!!! Forecasting called with " + sd + " and day=" + d + " time:" + ti) ;
        
        
        try
        {
             FileInputStream fstream = new FileInputStream(toforecast.getText());

             DataInputStream in = new DataInputStream(fstream);

             BufferedReader br = new BufferedReader(new InputStreamReader(in));

             String strLine;

             Vector<PredResult> allres = new Vector<PredResult>();
             
             int count =0;
               //Read File Line By Line
             while ((strLine = br.readLine()) != null)   {
        
                 writetolog("Trying to predict for " + strLine);
                 
                 String [] parts = strLine.split("#");
                 
                 PredResult pr = new PredResult();
                 pr.lat = parts[0];
                 pr.longt = parts[1];
                 double res=predictTraffic(strLine,d,ti);
                 pr.traffic = res;
             
                 allres.add(pr);
                 
                 writetolog("Predicted traffic for loc:" + strLine + "=" + res);
                  
                 try
                 {
                     Database db = new Database();
                     
                     String place = (String)locmap.get(strLine);
                     
                     String q = "delete from trafficinfo where loclatlong='" + place + "' and timeval='" +ti +"' and " +
                                         " dateval='" + dastr + "'";
                     
                     System.out.println(q);
                     
                     db.executeUpdate(q);
                     
                    
                     q = "insert into trafficinfo values('" + place + "','" + ti + "'," + res + ",'" + dastr +"')";
                     System.out.println(q);
                     db.executeUpdate(q);
                                                       
                             
                     
                     
                     db.close();
                 }
                 catch(Exception exxx)
                 {
                     exxx.printStackTrace();
                 }
                 
             }
             displayInMap(allres);
             br.close();
             in.close();
             fstream.close();
             
        }
        catch(Exception ex)
        {
            ex.printStackTrace();
        }
            
        
        
        
    }//GEN-LAST:event_forecastTrafficActionPerformed

    
    void displayInMap(Vector<PredResult> allpres)
    {
        
        String precont = "";
        String postcont = "";
        String midroute = "";
        try
        {
            precont = new String(Files.readAllBytes(Paths.get("preroute.htm")));  
            postcont = new String(Files.readAllBytes(Paths.get("postroute.htm")));
            midroute = new String(Files.readAllBytes(Paths.get("midroute.htm")));
        }
        catch(Exception e)
        {
           e.printStackTrace();   
        }
        
        
        
        
        try
        {
           File fx = new File("routemap.htm");
           fx.delete();
            
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
        DecimalFormat df = new DecimalFormat("#.##");
        FileAppender.AppendtoFile("routemap.htm", precont);
        
        Vector<RoadInfo> allroad = new Vector<RoadInfo>();
        for (int i=0;i<vloctraffic.size();i+=2)
        {
            LocationTraffic x = vloctraffic.get(i);
            LocationTraffic y = vloctraffic.get(i+1);
            //for (int j=i+1;j<vloctraffic.size();j++)
            {
                
                RoadInfo rf = new RoadInfo();
                rf.flati = Double.toString(x.lat);
                rf.flong = Double.toString(x.longt);
                rf.tlati = Double.toString(y.lat);
                rf.tlong = Double.toString(y.longt);
                
                for (int k=0;k<allpres.size();k++)
                {
                    String lock = allpres.get(k).lat + "#" + allpres.get(k).longt;
                    //System.out.println("lock:" + lock);
                    //System.out.println("x.loc" + x.loc);
                    //System.out.println("y.loc" + y.loc);
                    
                    
                    if (lock.equals(x.loc))
                    {
                        rf.traffic1= df.format(allpres.get(k).traffic);    
                    }
                    if (lock.equals(y.loc))
                    {
                         rf.traffic2 = df.format(allpres.get(k).traffic);
                    }
                    if (lock.equals(x.loc) || lock.equals(y.loc))
                    {
                        
                       System.out.println(">>>>>>>>>>>Found match");
                       if (allpres.get(k).traffic>20)
                       {
                           
                           rf.condition=1;
                           
                           
                       }
                       else
                       {
                           rf.condition=0;
                       }
                    }
                    
                }
                allroad.add(rf);
                
                
            }
        }
        
        for (int i=0;i<allroad.size();i++)
        {
            String vt1 = "{";    
            
            String vt2=  " \"title\": ' " + "Traffic-" + allroad.get(i).traffic1 + "',";            
            String vt3 =  " \"lat\": ' " + allroad.get(i).flati + "',";       
            String vt4 =  " \"lng\": '" + allroad.get(i).flong + "'";  
            String vt5 = "},";    
            FileAppender.AppendtoFile("routemap.htm",vt1);
            FileAppender.AppendtoFile("routemap.htm",vt2);
            FileAppender.AppendtoFile("routemap.htm",vt3);
            FileAppender.AppendtoFile("routemap.htm",vt4);
            FileAppender.AppendtoFile("routemap.htm",vt5);
            
            
            vt1 = "{";    
            
            vt2=  " \"title\": ' " + "Traffic-" + allroad.get(i).traffic2 + "',";            
            vt3 =  " \"lat\": ' " + allroad.get(i).tlati + "',";       
            vt4 =  " \"lng\": '" + allroad.get(i).tlong + "'";  
            vt5 = "},";    
            
            if (i==allroad.size()-1)
            {
                vt5 = "}";
            }
            FileAppender.AppendtoFile("routemap.htm",vt1);
            FileAppender.AppendtoFile("routemap.htm",vt2);
            FileAppender.AppendtoFile("routemap.htm",vt3);
            FileAppender.AppendtoFile("routemap.htm",vt4);
            FileAppender.AppendtoFile("routemap.htm",vt5);
            
        }
        
        FileAppender.AppendtoFile("routemap.htm",midroute);
        
        for (int i=0;i<allroad.size();i++)
        {
            if (allroad.get(i).condition==0)
            {
               String str = "lat_longcolor.push(\"#00FF00\");";
               FileAppender.AppendtoFile("routemap.htm",str);
               FileAppender.AppendtoFile("routemap.htm",str);
            }
            else
            {
               String str = "lat_longcolor.push(\"#FF0000\");";
               FileAppender.AppendtoFile("routemap.htm",str);
               FileAppender.AppendtoFile("routemap.htm",str);
            }
            
            
        }
        
        
        FileAppender.AppendtoFile("routemap.htm", postcont);
        
        try {
          Desktop desktop = java.awt.Desktop.getDesktop();
          URI oURL = new URI("routemap.htm");
          desktop.browse(oURL);
        } catch (Exception e) {
          e.printStackTrace();
        }
        
        
        /*
        String precont = "";
        String postcont = "";
        try
        {
            precont = new String(Files.readAllBytes(Paths.get("pre.htm")));  
            postcont = new String(Files.readAllBytes(Paths.get("post.htm")));
            
        }
        catch(Exception e)
        {
           e.printStackTrace();   
        }
        
        try
        {
           File fx = new File("allbinview.htm");
           fx.delete();
            
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
        
        FileAppender.AppendtoFile("allbinview.htm", precont);
        /////////////////////////////
         try
         {
                 
             for (int i=0;i<allpres.size();i++)
             {
                 double fill = allpres.get(i).traffic;
                 String lat = allpres.get(i).lat;
                 String longt = allpres.get(i).longt;
                 
                 
                 String latstr = "var latlng" + (i+1) + " = new google.maps.LatLng(" + lat + "," + longt + ");";
                 FileAppender.AppendtoFile("allbinview.htm",latstr); 
                 
              
                 
             }
             
             String cm1 = " var myOptions = {";
             String cm2 = "zoom: 10, ";
             String cm3 = "center: latlng1,";
             String cm4=  "mapTypeId: google.maps.MapTypeId.ROADMAP";
             String cm5=  "};"; 
            
             FileAppender.AppendtoFile("allbinview.htm",cm1);
             FileAppender.AppendtoFile("allbinview.htm",cm2); 
             FileAppender.AppendtoFile("allbinview.htm",cm3);
             FileAppender.AppendtoFile("allbinview.htm",cm4);
             FileAppender.AppendtoFile("allbinview.htm",cm5);
             
             String st = "var map = new google.maps.Map(document.getElementById(\"map_container\"),myOptions);";
             FileAppender.AppendtoFile("allbinview.htm",st);
             
             
             
            
             
             for (int i=0;i<allpres.size();i++)
             {
                 String st1 = "var marker" + (i+1) + " = new google.maps.Marker({";
                 String st2 = "position: latlng" + (i+1) + ",";
                 String st3 = "map: map,";
                 String st4 = "title:\" " + allpres.get(i).traffic + "\"";
                 String st5 = "});";
                 FileAppender.AppendtoFile("allbinview.htm",st1);
                 FileAppender.AppendtoFile("allbinview.htm",st2);
                 FileAppender.AppendtoFile("allbinview.htm",st3);
                 FileAppender.AppendtoFile("allbinview.htm",st4);
                 FileAppender.AppendtoFile("allbinview.htm",st5);
                 
             }
             
             
             FileAppender.AppendtoFile("allbinview.htm", postcont);
          
             
             
         }
         catch(Exception e)
         {
             e.printStackTrace();
         }
        
          try {
          Desktop desktop = java.awt.Desktop.getDesktop();
          URI oURL = new URI("allbinview.htm");
          desktop.browse(oURL);
        } catch (Exception e) {
          e.printStackTrace();
        }
        */
        
    }
     void deleteOutPutDir(String outpath)
    {
        File directory = new File(outpath);

    	//make sure directory exists
    	if(!directory.exists()){

           System.out.println("Directory does not exist.");
           //System.exit(0);

        }else{

           try{

               delete(directory);

           }catch(Exception e){
               e.printStackTrace();
               //System.exit(0);
           }
        }
        
        
    }
    
    public static void delete(File file)
    	throws Exception{

    	if(file.isDirectory()){

    		//directory is empty, then delete it
    		if(file.list().length==0){

    		   file.delete();
    		   System.out.println("Directory is deleted : "
                                                 + file.getAbsolutePath());

    		}else{

    		   //list all the directory contents
        	   String files[] = file.list();

        	   for (String temp : files) {
        	      //construct the file structure
        	      File fileDelete = new File(file, temp);

        	      //recursive delete
        	     delete(fileDelete);
        	   }

        	   //check the directory again, if empty then delete it
        	   if(file.list().length==0){
           	     file.delete();
        	     System.out.println("Directory is deleted : "
                                                  + file.getAbsolutePath());
        	   }
    		}

    	}else{
    		//if file, then delete it
    		file.delete();
    		System.out.println("File is deleted : " + file.getAbsolutePath());
    	}
    }
    
    private void forecastInBigDataModeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_forecastInBigDataModeActionPerformed
        // TODO add your handling code here:
        
        try
        {
             deleteOutPutDir(outpath);
             HForecast.inst = this;
             JobConf conf = new JobConf(HForecast.class);
             conf.setJobName("Traffic Forecast");

             conf.setOutputKeyClass(Text.class);
 	     conf.setOutputValueClass(Text.class);

 	     conf.setMapperClass(HForecast.Map.class);
	     //conf.setCombinerClass(OddEvenCounter.Reduce.class);
             conf.setReducerClass(HForecast.Reduce.class);

	     conf.setInputFormat(KeyValueTextInputFormat.class);
	     conf.setOutputKeyClass(Text.class);
             conf.setOutputValueClass(Text.class);
             
             
	     FileInputFormat.setInputPaths(conf, new Path(inppath));
 	     FileOutputFormat.setOutputPath(conf, new Path(outpath));

             System.out.println("About to start app");
             
             Calendar cd = Calendar.getInstance();
             long st = cd.getTimeInMillis();
             
 	     JobClient.runJob(conf);
             
        }
        catch(Exception ex)
        {
            ex.printStackTrace();
        }
                
        
        
        
    }//GEN-LAST:event_forecastInBigDataModeActionPerformed

    
     private JFreeChart createChartForPerfChart(final XYDataset dataset, String tit,String xl,String yl) {

        // create the chart...
        final JFreeChart chart = ChartFactory.createXYLineChart(
            tit,      // chart title
            xl,                      // x axis label
            yl,                      // y axis label
            dataset,                  // data
            PlotOrientation.VERTICAL,
            true,                     // include legend
            true,                     // tooltips
            false                     // urls
        );

        // NOW DO SOME OPTIONAL CUSTOMISATION OF THE CHART...
        chart.setBackgroundPaint(Color.white);

//        final StandardLegend legend = (StandardLegend) chart.getLegend();
  //      legend.setDisplaySeriesShapes(true);

        // get a reference to the plot for further customisation...
        final XYPlot plot = chart.getXYPlot();
        plot.setBackgroundPaint(Color.lightGray);
    //    plot.setAxisOffset(new Spacer(Spacer.ABSOLUTE, 5.0, 5.0, 5.0, 5.0));
        plot.setDomainGridlinePaint(Color.white);
        plot.setRangeGridlinePaint(Color.white);

        final XYLineAndShapeRenderer renderer = new XYLineAndShapeRenderer();
        renderer.setSeriesLinesVisible(0, true);
        renderer.setSeriesShapesVisible(1, true);
        plot.setRenderer(renderer);

        //change the auto tick unit selection to integer units only...
        //final NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();
        //rangeAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());
        //OPTIONAL CUSTOMISATION COMPLETED.

        return chart;

    }



    private XYDataset createDatasetForPerfChart(String filename)
    {
       final XYSeriesCollection dataset = new XYSeriesCollection();


       XYSeries  P = new XYSeries("KNN");
       XYSeries  E = new XYSeries("ARIMA"); 
       XYSeries  A = new XYSeries("Actual"); 
       
 


       try
       {
           FileInputStream fstream = new FileInputStream(filename);
           DataInputStream in = new DataInputStream(fstream);
           BufferedReader br = new BufferedReader(new InputStreamReader(in));

           String strLine;
           //Read File Line By Line
           while ((strLine = br.readLine()) != null)   {
              // Print the content on the console
              System.out.println (strLine);

              String [] tem = strLine.split("#");

              if(tem[0].equals("P"))
              {
                 P.add(Double.parseDouble(tem[1]),Double.parseDouble(tem[2])) ;
              }
              if(tem[0].equals("E"))
              {
                 E.add(Double.parseDouble(tem[1]),Double.parseDouble(tem[2])) ;
              }
              if(tem[0].equals("A"))
              {
                 A.add(Double.parseDouble(tem[1]),Double.parseDouble(tem[2])) ;
              }






           }
           //Close the input stream
           in.close();



       }
       catch(Exception e)
       {
           e.printStackTrace();
       }

       dataset.addSeries(P);
       dataset.addSeries(E);
       dataset.addSeries(A);


       return dataset;


    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton browse;
    private javax.swing.JButton browseToForecast;
    private javax.swing.JButton doTraining;
    private javax.swing.JTextField fday;
    private javax.swing.JButton forecastInBigDataMode;
    private javax.swing.JButton forecastTraffic;
    private javax.swing.JTextField ftimeinterval;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField kvalue;
    private javax.swing.JTextPane logtext;
    private javax.swing.JPanel ppanel;
    private javax.swing.JTextField toforecast;
    private javax.swing.JTextField trainfile;
    private javax.swing.JButton viewGraph;
    // End of variables declaration//GEN-END:variables
}
